
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Install Turbonomic
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

# --------------------------------------------------------------------------------------------------------------------------------------
# Install Turbonomic Demo Content
# --------------------------------------------------------------------------------------------------------------------------------------

- name: 🛰️  START - INSTALL TURBONOMIC
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Installing TURBONOMIC Demo Content"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true



- name: 🚀 TURBONOMIC - Get ROUTE
  shell: |
    export TURBO_URL=$(oc get route -n turbonomic api -o jsonpath={.spec.host})
    echo $TURBO_URL
  ignore_errors: true
  register: output
        
- name: 🚀 TURBONOMIC - Set ROUTE - {{ output.stdout_lines }} 
  set_fact: TURBO_URL={{ output.stdout_lines[0] }} 



- name: 🚀 TURBONOMIC - Login
  shell: |
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 📥 Initialization"
    export TURBO_PASSWORD={{current_cp4waiops_feature.turbo_password}}
    export TURBO_URL={{TURBO_URL}}

    while [[ `curl -XPOST -s -k -c /tmp/cookies -H 'accept: application/json' "https://{{TURBO_URL}}/api/v3/login?hateoas=true" -d "username=administrator&password=$TURBO_PASSWORD"` =~ "InvalidCredentialsException" ]]
    do
      echo "Waiting for Turbo Init"
      sleep 15
    done
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1
        





- name: 🚀 TURBONOMIC - Create demo User
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 📥 Create demo User"
    result=$(curl -XPOST -s -k "https://{{TURBO_URL}}/api/v3/users" -b /tmp/cookies  -H 'Content-Type: application/json;' -H 'accept: application/json' -d '  {
      "displayName": "Demo User",
        "username": "{{current_cp4waiops_feature.demo_user}}",
        "password": "{{current_cp4waiops_feature.demo_password}}",
        "roles": [
          {
            "name": "ADMINISTRATOR"
          }
        ],
        "loginProvider": "Local",
        "type": "DedicatedCustomer",
        "showSharedUserSC": false
      }
      ')
    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1




- name: 🚀 TURBONOMIC - Create RobotShop BusinessApp
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 📥 Create RobotShop BusinessApp"
    result=$(curl -s -k -X 'POST' \
      "https://{{TURBO_URL}}/api/v3/topologydefinitions" -b /tmp/cookies\
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '  {
        "uuid": "285815442727328",
        "displayName": "RobotShop",
        "contextBased": true,
        "entityType": "BusinessApplication",
        "entityDefinitionData": {
          "manualConnectionData": {
                    "Service": {
              "dynamicConnectionCriteria": [
                {
                  "expVal": ".*robot.*",
                  "expType": "RXEQ",
                  "filterType": "servicesByName",
                  "caseSensitive": false,
                  "entityType": null,
                  "singleLine": false
                }
              ]
            },
            "Container": {
              "dynamicConnectionCriteria": [
                {
                  "expVal": "robot-shop",
                  "expType": "EQ",
                  "filterType": "containersByNamespace",
                  "caseSensitive": false,
                  "entityType": null,
                  "singleLine": false
                }
              ]
            },
            "VirtualMachine": {
              "dynamicConnectionCriteria": [
                {
                  "expVal": ".*demo.*",
                  "expType": "RXEQ",
                  "filterType": "vmsByName",
                  "caseSensitive": false,
                  "entityType": null,
                  "singleLine": false
                }
              ]
            },
            "ContainerPod": {
              "dynamicConnectionCriteria": [
                {
                  "expVal": "robot-shop",
                  "expType": "EQ",
                  "filterType": "containerPodsByNamespace",
                  "caseSensitive": false,
                  "entityType": null,
                  "singleLine": false
                }
              ]
            },
            "ApplicationComponent": {
              "dynamicConnectionCriteria": [
                {
                  "expVal": "*.robot.*",
                  "expType": "RXEQ",
                  "filterType": "appCompsByName",
                  "caseSensitive": false,
                  "entityType": null,
                  "singleLine": false
                }
              ]
            }
          }
        }
      }')

    appID=$(echo $result|jq -r ".uuid")

    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1





- name: 🚀 TURBONOMIC - Create Group vSphere VMs
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 📥 Create Groups"
    result=$(curl -s -k -X 'POST' \
      "https://{{TURBO_URL}}/api/v3/groups" -b /tmp/cookies\
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '  {
        "displayName": "vSphere VMs",
        "className": "Group",
        "groupType": "VirtualMachine",
        "environmentType": "ONPREM",
        "isStatic": false,
        "logicalOperator": "AND",
        "criteriaList": [
          {
            "expVal": "vCenter",
            "expType": "EQ",
            "filterType": "vmByTargetType",
            "caseSensitive": false,
            "entityType": null,
            "singleLine": false
          }
        ],
        "temporary": false,
        "memberTypes": [
          "VirtualMachine"
        ],
        "entityTypes": [
          "VirtualMachine"
        ],
        "groupOrigin": "USER",
        "groupClassName": "GroupApiDTO"
      }')

    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1




- name: 🚀 TURBONOMIC - Create Group RobotShop AppComponents
  shell: |

    result=$(curl -s -k -X 'POST' \
      "https://{{TURBO_URL}}/api/v3/groups" -b /tmp/cookies\
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '  {
        "displayName": "RobotShop AppComponents",
        "className": "Group",
        "groupType": "ApplicationComponent",
        "severity": "NORMAL",
        "environmentType": "HYBRID",
        "isStatic": false,
        "logicalOperator": "AND",
        "criteriaList": [
          {
            "expVal": ".*robot.*",
            "expType": "RXEQ",
            "filterType": "appCompsByName",
            "caseSensitive": false,
            "entityType": null,
            "singleLine": false
          }
        ],
        "temporary": false,
        "cloudType": "UNKNOWN",
        "memberTypes": [
          "ApplicationComponent"
        ],
        "entityTypes": [
          "ApplicationComponent"
        ],
        "groupOrigin": "USER",
        "groupClassName": "GroupApiDTO"
      }')

    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1




- name: 🚀 TURBONOMIC - Create Licensing Groups
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 📥 Create Licensing Groups"

    result=$(curl -s -k -X 'POST' \
      "https://{{TURBO_URL}}/api/v3/groups" -b /tmp/cookies\
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -d ' {
        "displayName": "_DB_LICENSED_HOSTs",
        "className": "Group",
        "groupType": "PhysicalMachine",
        "severity": "CRITICAL",
        "environmentType": "ONPREM",
        "isStatic": false,
        "logicalOperator": "AND",
        "criteriaList": [
          {
            "expVal": "192.168.10.88",
            "expType": "RXEQ",
            "filterType": "pmsByName",
            "caseSensitive": false,
            "entityType": null,
            "singleLine": false
          }
        ],
        "temporary": false,
        "cloudType": "UNKNOWN",
        "memberTypes": [
          "PhysicalMachine"
        ],
        "entityTypes": [
          "PhysicalMachine"
        ],
        "groupOrigin": "USER",
        "groupClassName": "GroupApiDTO"
      }
      
      ')

    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""



    result=$(curl -s -k -X 'POST' \
      "https://{{TURBO_URL}}/api/v3/groups" -b /tmp/cookies\
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '   {
        "displayName": "_DB_VMs",
        "className": "Group",
        "groupType": "VirtualMachine",
        "severity": "NORMAL",
        "environmentType": "HYBRID",
        "isStatic": false,
        "logicalOperator": "AND",
        "criteriaList": [
          {
            "expVal": ".*mysql.*|.*demo.*|.*backend.*",
            "expType": "RXEQ",
            "filterType": "vmsByName",
            "caseSensitive": false,
            "entityType": null,
            "singleLine": false
          }
        ],
        "temporary": false,
        "cloudType": "HYBRID",
        "memberTypes": [
          "VirtualMachine"
        ],
        "entityTypes": [
          "VirtualMachine"
        ],
        "groupOrigin": "USER",
        "groupClassName": "GroupApiDTO"
      }
      ')

    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1





- name: 🚀 TURBONOMIC - Deploy Synthetic Metrics Server for DIF
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Deploy Synthetic Metrics Server for DIF"
    oc apply -f ./tools/97_addons/experimental/turbonomic/turbo-metrics-dif/create-data-ingestion.yaml| sed 's/^/     /'
    echo ""
    echo ""
    export robotshopUUID=$(curl -XGET -s -k "https://{{TURBO_URL}}/api/v3/topologydefinitions" -b /tmp/cookies  -H 'Content-Type: application/json;' -H 'accept: application/json'|jq -r '.[]|select(.displayName=="RobotShop").uuid')
    echo "  🌏 Synthetic Metric URL: http://turbo-dif-service.default:3000/businessApplication/RobotShop/$robotshopUUID"
    echo ""
    echo ""

- name: 🚀 TURBONOMIC - Deploy Memory and CPU Hogs
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Deploy Memory and CPU Hogs"
    oc apply  -f ./tools/97_addons/experimental/turbonomic/prime_numbers/prime_numbers-deploy.yaml| sed 's/^/     /'
    oc apply  -f ./tools/97_addons/experimental/turbonomic/memory_grabber/memory_grabber.yaml| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1




- name: 🚀 TURBONOMIC - Deploy Memory and CPU Hogs
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 📥 Create Instana Target"
    result=$(curl -XPOST -s -k "https://{{TURBO_URL}}/api/v3/targets" -b /tmp/cookies  -H 'Content-Type: application/json;' -H 'accept: application/json' -d '{
        "uuid": "74709474070544",
        "displayName": "159.122.143.166",
        "category": "Applications and Databases",
        "inputFields": [
          {
            "name": "apiToken",
            "value": "'$INSTANA_TOKEN'"
          },
          {
            "name": "address",
            "value": "'$INSTANA_IP'"
          },
          {
            "name": "collectVmMetrics",
            "value": "false"
          }
        ],
        "type": "Instana",
        "readonly": false
      }')

    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 TURBONOMIC - Deploy Memory and CPU Hogs
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 📥 Create Hello Metrics"
    result=$(curl -XPOST -s -k "https://{{TURBO_URL}}/api/v3/targets" -b /tmp/cookies  -H 'Content-Type: application/json;' -H 'accept: application/json' -d '{
        "uuid": "74709421524256",
        "displayName": "SyntheticMetricsHelloWorld",
        "category": "Custom",
        "inputFields": [
          {
            "name": "Name",
            "value": "Hello"
          },
          {
            "name": "targetIdentifier",
            "value": "http://turbo-metrics-dif-service.turbonomic:3000/helloworld"
          }
        ],
        "type": "DataIngestionFramework-Turbonomic",
        "readonly": false
      }')

    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1



- name: 🚀 TURBONOMIC - Deploy Memory and CPU Hogs
  shell: |

    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 📥 Create RobotShop Metrics"
    export robotshopUUID=$(curl -XGET -s -k "https://{{TURBO_URL}}/api/v3/topologydefinitions" -b /tmp/cookies  -H 'Content-Type: application/json;' -H 'accept: application/json'|jq -r '.[]|select(.displayName=="RobotShop").uuid')

    result=$(curl -XPOST -s -k "https://{{TURBO_URL}}/api/v3/targets" -b /tmp/cookies  -H 'Content-Type: application/json;' -H 'accept: application/json' -d '{
        "uuid": "74709422922224",
        "displayName": "SyntheticMetricsRobotShop",
        "category": "Custom",
        "inputFields": [
          {
            "name": "Name",
            "value": "RobotShop"
          },
          {
            "name": "targetIdentifier",
            "value": "http://turbo-metrics-dif-service.turbonomic:3000/businessApplication/RobotShop/'$robotshopUUID'"
          }
        ],
        "type": "DataIngestionFramework-Turbonomic",
        "readonly": false
        }
      }')

    echo $result|jq -r ".message"| sed 's/^/     /'
    echo ""
    echo ""
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  DEBUG
  debug:
    var: output.stdout_lines
    verbosity: 1

